<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="c7762911-c08d-4293-a146-589b954fb1a6" name="Changes" comment="Issues fixed and add new features to the app:&#10;&#10;-refactor the name of the UserServiceImplements class to WeatherServiceImpl.&#10;-refactor the name of the interface UserService to WeatherService.&#10;-changed the name of the method inside the WeatherService interface from createWeather to storeWeatherObservation. It describes better the action being performed.&#10;-refactor the UserDTO class name to WeatherDTO.&#10;-refactor the UserController class to WeatherController.&#10;-code formatting has been applied to the whole project.&#10;-the name of the &quot;location&quot; String data type, &quot;temperature&quot; double data type&#10;and &quot;humidity&quot; int have been changed to: &#10;* location &gt; city&#10;* temperature &gt; weatherTemperature&#10;* humidity &gt; weatherHumidity&#10;I think it provides more specific information related to our app.&#10;- the 'createWeather' method from the WeatherController class has been renamed to &quot;storeWeather&quot;, it is more specific to the role of the app.&#10;-the updateWeather method from the weatherServiceImpl interface has been renamed to getWeatherObservations, it  returns a list of weatherObservationsDTOs.&#10;-add a new method in the WeatherController labelled getWeatherObservations that gets all the Weather DTOs from weatherList DTO's in the WeatherServiceImpl class. This way we can make use of the weatherList created on the mob programming but never had the chance to use it. The endpoint for getWeatherObservations is the same as storeWeather, more exactly &quot;/api/weather&quot;.&#10;-add a new method labelled deleteWeatherObservationsByCity in the WeatherService interface, the logic behind it has been implemented in the WeatherService class. The weather controller had also been updated with this method on a new end point &quot;/api/weather/{cityName}&quot;.&#10;-add a new method labelled updateWeather in the WeatherService interface, the logic behind it has been implemented in the WeatherService class. The weather controller had also been updated with this method on a new end point &quot;/api/weather&quot;.&#10;-logs have been created for each method, we might need to delete them later, however for logging each http request I think it's helpful at this stage.&#10;-the text from the readme.md file has been altered for a better understanding of the edu project.">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/controllers/WeatherController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/controllers/WeatherController.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/models/dto/WeatherDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/models/dto/WeatherDTO.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="issues_fix" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
  "lastFilter": {
    "state": "OPEN"
  }
}]]></component>
  <component name="GithubPullRequestsUISettings">
    <option name="selectedUrlAndAccountId">
      <UrlAndAccount>
        <option name="accountId" value="088c587d-0a41-4c7b-9867-ce9fef72f848" />
        <option name="url" value="https://github.com/dobraflorin/weatherAPi.git" />
      </UrlAndAccount>
    </option>
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="MavenImportPreferences">
    <option name="importingSettings">
      <MavenImportingSettings>
        <option name="workspaceImportEnabled" value="true" />
      </MavenImportingSettings>
    </option>
  </component>
  <component name="ProjectId" id="2OKkQ9VvT976ftE3bXkSpqnjshh" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/Florin/Desktop/weatherAPi&quot;
  }
}</component>
  <component name="RunManager">
    <configuration name="WeatherAPiApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.example.WeatherAPiApplication" />
      <module name="weatherAPi" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.WeatherAPiApplication" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="c7762911-c08d-4293-a146-589b954fb1a6" name="Changes" comment="" />
      <created>1681316641661</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1681316641661</updated>
    </task>
    <task id="LOCAL-00001" summary="first update">
      <created>1681408086271</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1681408086271</updated>
    </task>
    <task id="LOCAL-00002" summary="first update">
      <created>1681423328848</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1681423328848</updated>
    </task>
    <task id="LOCAL-00003" summary="Issues fixed and add new features to the app:&#10;&#10;-refactor the name of the UserServiceImplements class to WeatherServiceImpl.&#10;-refactor the name of the interface UserService to WeatherService.&#10;-changed the name of the method inside the WeatherService interface from createWeather to storeWeatherObservation. It describes better the action being performed.&#10;-refactor the UserDTO class name to WeatherDTO.&#10;-refactor the UserController class to WeatherController.&#10;-code formatting has been applied to the whole project.&#10;-the name of the &quot;location&quot; String data type, &quot;temperature&quot; double data type&#10;and &quot;humidity&quot; int have been changed to: &#10;* location &gt; city&#10;* temperature &gt; weatherTemperature&#10;* humidity &gt; weatherHumidity&#10;I think it provides more specific information related to our app.&#10;- the 'createWeather' method from the WeatherController class has been renamed to &quot;storeWeather&quot;, it is more specific to the role of the app.&#10;-the updateWeather method from the weatherServiceImpl interface has been renamed to getWeatherObservations, it  returns a list of weatherObservationsDTOs.&#10;-add a new method in the WeatherController labelled getWeatherObservations that gets all the Weather DTOs from weatherList DTO's in the WeatherServiceImpl class. This way we can make use of the weatherList created on the mob programming but never had the chance to use it. The endpoint for getWeatherObservations is the same as storeWeather, more exactly &quot;/api/weather&quot;.&#10;-add a new method labelled deleteWeatherObservationsByCity in the WeatherService interface, the logic behind it has been implemented in the WeatherService class. The weather controller had also been updated with this method on a new end point &quot;/api/weather/{cityName}&quot;.&#10;-add a new method labelled updateWeather in the WeatherService interface, the logic behind it has been implemented in the WeatherService class. The weather controller had also been updated with this method on a new end point &quot;/api/weather&quot;.&#10;-logs have been created for each method, we might need to delete them later, however for logging each http request I think it's helpful at this stage.&#10;-the text from the readme.md file has been altered for a better understanding of the edu project.">
      <created>1681586545783</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1681586545783</updated>
    </task>
    <task id="LOCAL-00004" summary="Issues fixed and add new features to the app:&#10;&#10;-refactor the name of the UserServiceImplements class to WeatherServiceImpl.&#10;-refactor the name of the interface UserService to WeatherService.&#10;-changed the name of the method inside the WeatherService interface from createWeather to storeWeatherObservation. It describes better the action being performed.&#10;-refactor the UserDTO class name to WeatherDTO.&#10;-refactor the UserController class to WeatherController.&#10;-code formatting has been applied to the whole project.&#10;-the name of the &quot;location&quot; String data type, &quot;temperature&quot; double data type&#10;and &quot;humidity&quot; int have been changed to: &#10;* location &gt; city&#10;* temperature &gt; weatherTemperature&#10;* humidity &gt; weatherHumidity&#10;I think it provides more specific information related to our app.&#10;- the 'createWeather' method from the WeatherController class has been renamed to &quot;storeWeather&quot;, it is more specific to the role of the app.&#10;-the updateWeather method from the weatherServiceImpl interface has been renamed to getWeatherObservations, it  returns a list of weatherObservationsDTOs.&#10;-add a new method in the WeatherController labelled getWeatherObservations that gets all the Weather DTOs from weatherList DTO's in the WeatherServiceImpl class. This way we can make use of the weatherList created on the mob programming but never had the chance to use it. The endpoint for getWeatherObservations is the same as storeWeather, more exactly &quot;/api/weather&quot;.&#10;-add a new method labelled deleteWeatherObservationsByCity in the WeatherService interface, the logic behind it has been implemented in the WeatherService class. The weather controller had also been updated with this method on a new end point &quot;/api/weather/{cityName}&quot;.&#10;-add a new method labelled updateWeather in the WeatherService interface, the logic behind it has been implemented in the WeatherService class. The weather controller had also been updated with this method on a new end point &quot;/api/weather&quot;.&#10;-logs have been created for each method, we might need to delete them later, however for logging each http request I think it's helpful at this stage.&#10;-the text from the readme.md file has been altered for a better understanding of the edu project.">
      <created>1681586605452</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1681586605452</updated>
    </task>
    <option name="localTasksCounter" value="5" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
    <MESSAGE value="firts update" />
    <MESSAGE value="first update" />
    <MESSAGE value="Issues fixed and add new features to the app:&#10;&#10;-refactor the name of the UserServiceImplements class to WeatherServiceImpl.&#10;-refactor the name of the interface UserService to WeatherService.&#10;-changed the name of the method inside the WeatherService interface from createWeather to storeWeatherObservation. It describes better the action being performed.&#10;-refactor the UserDTO class name to WeatherDTO.&#10;-refactor the UserController class to WeatherController.&#10;-code formatting has been applied to the whole project.&#10;-the name of the &quot;location&quot; String data type, &quot;temperature&quot; double data type&#10;and &quot;humidity&quot; int have been changed to: &#10;* location &gt; city&#10;* temperature &gt; weatherTemperature&#10;* humidity &gt; weatherHumidity&#10;I think it provides more specific information related to our app.&#10;- the 'createWeather' method from the WeatherController class has been renamed to &quot;storeWeather&quot;, it is more specific to the role of the app.&#10;-the updateWeather method from the weatherServiceImpl interface has been renamed to getWeatherObservations, it  returns a list of weatherObservationsDTOs.&#10;-add a new method in the WeatherController labelled getWeatherObservations that gets all the Weather DTOs from weatherList DTO's in the WeatherServiceImpl class. This way we can make use of the weatherList created on the mob programming but never had the chance to use it. The endpoint for getWeatherObservations is the same as storeWeather, more exactly &quot;/api/weather&quot;.&#10;-add a new method labelled deleteWeatherObservationsByCity in the WeatherService interface, the logic behind it has been implemented in the WeatherService class. The weather controller had also been updated with this method on a new end point &quot;/api/weather/{cityName}&quot;.&#10;-add a new method labelled updateWeather in the WeatherService interface, the logic behind it has been implemented in the WeatherService class. The weather controller had also been updated with this method on a new end point &quot;/api/weather&quot;.&#10;-logs have been created for each method, we might need to delete them later, however for logging each http request I think it's helpful at this stage.&#10;-the text from the readme.md file has been altered for a better understanding of the edu project." />
    <option name="LAST_COMMIT_MESSAGE" value="Issues fixed and add new features to the app:&#10;&#10;-refactor the name of the UserServiceImplements class to WeatherServiceImpl.&#10;-refactor the name of the interface UserService to WeatherService.&#10;-changed the name of the method inside the WeatherService interface from createWeather to storeWeatherObservation. It describes better the action being performed.&#10;-refactor the UserDTO class name to WeatherDTO.&#10;-refactor the UserController class to WeatherController.&#10;-code formatting has been applied to the whole project.&#10;-the name of the &quot;location&quot; String data type, &quot;temperature&quot; double data type&#10;and &quot;humidity&quot; int have been changed to: &#10;* location &gt; city&#10;* temperature &gt; weatherTemperature&#10;* humidity &gt; weatherHumidity&#10;I think it provides more specific information related to our app.&#10;- the 'createWeather' method from the WeatherController class has been renamed to &quot;storeWeather&quot;, it is more specific to the role of the app.&#10;-the updateWeather method from the weatherServiceImpl interface has been renamed to getWeatherObservations, it  returns a list of weatherObservationsDTOs.&#10;-add a new method in the WeatherController labelled getWeatherObservations that gets all the Weather DTOs from weatherList DTO's in the WeatherServiceImpl class. This way we can make use of the weatherList created on the mob programming but never had the chance to use it. The endpoint for getWeatherObservations is the same as storeWeather, more exactly &quot;/api/weather&quot;.&#10;-add a new method labelled deleteWeatherObservationsByCity in the WeatherService interface, the logic behind it has been implemented in the WeatherService class. The weather controller had also been updated with this method on a new end point &quot;/api/weather/{cityName}&quot;.&#10;-add a new method labelled updateWeather in the WeatherService interface, the logic behind it has been implemented in the WeatherService class. The weather controller had also been updated with this method on a new end point &quot;/api/weather&quot;.&#10;-logs have been created for each method, we might need to delete them later, however for logging each http request I think it's helpful at this stage.&#10;-the text from the readme.md file has been altered for a better understanding of the edu project." />
  </component>
</project>